// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookBeauty.Services.Database;

#nullable disable

namespace bookBeauty.Services.Migrations
{
    [DbContext(typeof(_200101Context))]
    [Migration("20240611133743_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("bookBeauty.Services.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("HairDresserId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("HairDresserID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AppointmentId");

                    b.HasIndex("HairDresserId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CategoryID")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .HasColumnType("int")
                        .HasColumnName("FavoriteID");

                    b.Property<string>("AddedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.FavoriteProduct", b =>
                {
                    b.Property<int>("FavoriteProductsId")
                        .HasColumnType("int")
                        .HasColumnName("FavoriteProductsID");

                    b.Property<DateTime?>("AddingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteProductsId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.HairDresser", b =>
                {
                    b.Property<int>("HairDresserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("HairDresserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HairDresserId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("HairDresserId");

                    b.ToTable("HairDresser", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("CategoryID")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Price")
                        .IsRequired()
                        .HasColumnType("Image");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.RecommendResult", b =>
                {
                    b.Property<int>("RecommendResultId")
                        .HasColumnType("int")
                        .HasColumnName("RecommendResultID");

                    b.Property<int?>("FirstProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("FirstProductID");

                    b.Property<int?>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("SecondProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("SecondProductID");

                    b.Property<int?>("ThirdProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("ThirdProductID");

                    b.HasKey("RecommendResultId");

                    b.ToTable("RecommendResult", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("GenderId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Appointment", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.HairDresser", "HairDresser")
                        .WithMany("Appointments")
                        .HasForeignKey("HairDresserId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_HairDresser");

                    b.HasOne("bookBeauty.Services.Database.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Service");

                    b.HasOne("bookBeauty.Services.Database.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Appointment_User");

                    b.Navigation("HairDresser");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Favorite", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Favorite_Product");

                    b.HasOne("bookBeauty.Services.Database.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Favorite_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.FavoriteProduct", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Product", "Product")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_FavoriteProducts_Product");

                    b.HasOne("bookBeauty.Services.Database.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FavoriteProducts_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Order", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.OrderItem", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_Order");

                    b.HasOne("bookBeauty.Services.Database.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderItem_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Product", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Review", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Review_Product");

                    b.HasOne("bookBeauty.Services.Database.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Review_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Transaction", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Transaction_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.User", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_User_Gender");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.UserRole", b =>
                {
                    b.HasOne("bookBeauty.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("bookBeauty.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.HairDresser", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Product", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("Favorites");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.Service", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("bookBeauty.Services.Database.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
